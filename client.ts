// Code generated by the Encore v1.50.0 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-loft-backend-df3i.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the loft-backend-df3i Encore application.
 */
export default class Client {
    public readonly adminsettings: adminsettings.ServiceClient
    public readonly auctions: auctions.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly cart: cart.ServiceClient
    public readonly catalog: catalog.ServiceClient
    public readonly certificates: certificates.ServiceClient
    public readonly checkout: checkout.ServiceClient
    public readonly cities: cities.ServiceClient
    public readonly jobs: jobs.ServiceClient
    public readonly notifications: notifications.ServiceClient
    public readonly order_mgmt: order_mgmt.ServiceClient
    public readonly pages: pages.ServiceClient
    public readonly shipments: shipments.ServiceClient
    public readonly users: users.ServiceClient
    public readonly worker: worker.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * @deprecated This constructor is deprecated, and you should move to using BaseURL with an Options object
     */
    constructor(target: string, token?: string)

    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions)
    constructor(target: string | BaseURL = "prod", options?: string | ClientOptions) {

        // Convert the old constructor parameters to a BaseURL object and a ClientOptions object
        if (!target.startsWith("http://") && !target.startsWith("https://")) {
            target = Environment(target)
        }

        if (typeof options === "string") {
            options = { auth: options }
        }

        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.adminsettings = new adminsettings.ServiceClient(base)
        this.auctions = new auctions.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.cart = new cart.ServiceClient(base)
        this.catalog = new catalog.ServiceClient(base)
        this.certificates = new certificates.ServiceClient(base)
        this.checkout = new checkout.ServiceClient(base)
        this.cities = new cities.ServiceClient(base)
        this.jobs = new jobs.ServiceClient(base)
        this.notifications = new notifications.ServiceClient(base)
        this.order_mgmt = new order_mgmt.ServiceClient(base)
        this.pages = new pages.ServiceClient(base)
        this.shipments = new shipments.ServiceClient(base)
        this.users = new users.ServiceClient(base)
        this.worker = new worker.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the auth token to be used for each request
     * either by passing in a static token string or by passing in a function
     * which returns the auth token.
     *
     * These tokens will be sent as bearer tokens in the Authorization header.
     */
    auth?: string | AuthDataGenerator
}

export namespace adminsettings {
    export interface AdminAuctionItem {
        id: number
        "product_id": number
        title: string
        status: string
        "start_at": string
        "end_at": string
    }

    /**
     * Cities
     */
    export interface AdminCityItem {
        id: number
        "name_ar": string
        "name_en": string
        "shipping_fee_net": string
        enabled: boolean
    }

    export interface AdminDashboardStats {
        "users_total": number
        "users_verified_or_admin": number
        "products_total": number
        "pigeons_total": number
        "supplies_total": number
        "auctions_live": number
        "auctions_scheduled": number
        "auctions_ended": number
        "auctions_cancelled": number
        "auctions_winner_unpaid": number
        "orders_pending_payment": number
        "orders_paid": number
        "orders_awaiting_admin_refund": number
        "orders_refund_required": number
        "orders_refunded": number
        "invoices_unpaid": number
        "invoices_payment_in_progress": number
        "invoices_paid": number
        "invoices_failed": number
        "payments_pending": number
        "payments_paid": number
        "payments_failed": number
        "payments_refunded": number
        "generated_at": string
    }

    export interface AdminInvoiceItem {
        id: number
        "order_id": number
        number: string
        status: string
        "created_at": string
    }

    export interface AdminOrderItem {
        id: number
        "user_id": number
        source: string
        status: string
        "grand_total": string
        "created_at": string
    }

    export interface AdminProductItem {
        id: number
        type: string
        title: string
        slug: string
        "price_net": string
        status: string
        "created_at": string
    }

    export interface AdminShipmentItem {
        id: number
        "order_id": number
        "company_id": number
        "delivery_method": string
        status: string
        "tracking_ref": string
        "created_at": string
    }

    export interface AdminUserItem {
        id: number
        name: string
        email: string
        phone: string
        "city_id": number
        role: string
        state: string
        "email_verified_at": string
        "created_at": string
    }

    export interface CreateCityRequest {
        "name_ar": string
        "name_en": string
        /**
         * decimal as string
         */
        "shipping_fee_net": string

        enabled: boolean
    }

    export interface CreateShipmentRequest {
        "order_id": number
        /**
         * courier | pickup
         */
        "delivery_method": string

        "company_id": number
        "tracking_ref": string
    }

    export interface GetKeyRequest {
        Key: string
    }

    export interface GetKeyResponse {
        item: RawSetting
    }

    /**
     * HistoricalSalesData represents sales data for a specific period
     */
    export interface HistoricalSalesData {
        /**
         * "2024-01", "2024-02", etc.
         */
        period: string

        /**
         * Number of completed orders
         */
        sales: number

        /**
         * Number of ended auctions
         */
        auctions: number

        /**
         * Revenue in halalas
         */
        revenue: number

        "created_at": string
    }

    /**
     * HistoricalSalesResponse represents the response for historical sales data
     */
    export interface HistoricalSalesResponse {
        data: HistoricalSalesData[]
        period: string
        total: {
            sales: number
            auctions: number
            revenue: number
        }
    }

    export interface ListAuctionsRequest {
        /**
         * draft|scheduled|live|ended|cancelled|winner_unpaid
         */
        Status: string

        /**
         * by product title
         */
        Q: string

        Page: number
        Limit: number
    }

    export interface ListAuctionsResponse {
        items: AdminAuctionItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListCitiesResponse {
        items: AdminCityItem[]
    }

    export interface ListInvoicesRequest {
        /**
         * unpaid|payment_in_progress|paid|failed|refund_required|refunded|cancelled|void
         */
        Status: string

        OrderID: number
        Page: number
        Limit: number
    }

    export interface ListInvoicesResponse {
        items: AdminInvoiceItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListOrdersRequest {
        /**
         * pending_payment|paid|cancelled|awaiting_admin_refund|refund_required|refunded
         */
        Status: string

        UserID: number
        /**
         * auction|direct
         */
        Source: string

        Page: number
        Limit: number
    }

    export interface ListOrdersResponse {
        items: AdminOrderItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListProductsRequest {
        Q: string
        /**
         * pigeon|supply
         */
        Type: string

        /**
         * per domain
         */
        Status: string

        Page: number
        Limit: number
    }

    export interface ListProductsResponse {
        items: AdminProductItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListRawSettingsResponse {
        items: RawSetting[]
    }

    export interface ListShipmentsRequest {
        Status: string
        OrderID: number
        CompanyID: number
        Page: number
        Limit: number
    }

    export interface ListShipmentsResponse {
        items: AdminShipmentItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListUsersRequest {
        Q: string
        /**
         * registered|verified|admin
         */
        Role: string

        /**
         * active|inactive
         */
        State: string

        Page: number
        Limit: number
    }

    export interface ListUsersResponse {
        items: AdminUserItem[]
        total: number
        page: number
        limit: number
    }

    export interface ListVerificationRequestsRequest {
        /**
         * pending|approved|rejected (optional)
         */
        Status: string

        Limit: number
        Page: number
    }

    export interface ListVerificationRequestsResponse {
        items: VerificationRequestItem[]
        total: number
        page: number
        limit: number
    }

    /**
     * ProductCategoryStats represents product performance by category
     */
    export interface ProductCategoryStats {
        category: string
        count: number
        percentage: number
        revenue: number
        "last_updated": string
    }

    /**
     * ProductPerformanceResponse represents product performance analytics
     */
    export interface ProductPerformanceResponse {
        data: ProductCategoryStats[]
        "total_items": number
        period: string
        "last_updated": string
    }

    export interface RawSetting {
        key: string
        value: string
        description: string
        "allowed_values": string[]
        "updated_at": string
    }

    /**
     * RevenueAnalyticsData represents revenue data over time
     */
    export interface RevenueAnalyticsData {
        period: string
        "total_revenue": number
        "orders_revenue": number
        "auction_revenue": number
        "refund_amount": number
        "net_revenue": number
        "created_at": string
    }

    /**
     * RevenueAnalyticsResponse represents revenue analytics response
     */
    export interface RevenueAnalyticsResponse {
        data: RevenueAnalyticsData[]
        period: string
        growth: {
            percentage: number
            amount: number
        }
        summary: {
            "total_revenue": number
            "net_revenue": number
            "refund_rate": number
        }
    }

    export interface RuntimeSettingsResponse {
        settings: config.SystemSettings
    }

    export interface SettingsHistoryItem {
        key: string
        "old_value": string
        "new_value": string
        "actor_user_id": number
        at: string
        meta: JSONValue
    }

    /**
     * ====== History API Types ======
     */
    export interface SettingsHistoryRequest {
        Key: string
        Limit: number
    }

    export interface SettingsHistoryResponse {
        items: SettingsHistoryItem[]
    }

    export interface UpdateCityRequest {
        enabled: boolean
        /**
         * decimal as string
         */
        "shipping_fee_net": string
    }

    export interface UpdateError {
        key: string
        code: string
        message: string
    }

    export interface UpdateSettingItem {
        key: string
        value: string
    }

    export interface UpdateSettingsRequest {
        items: UpdateSettingItem[]
    }

    export interface UpdateSettingsResponse {
        updated: number
        errors: UpdateError[]
    }

    export interface UpdateShipmentRequest {
        status: string
        "tracking_ref": string
    }

    export interface UpdateUserRoleRequest {
        /**
         * registered|verified|admin
         */
        role: string

        reason: string
    }

    export interface UpdateUserStateRequest {
        /**
         * active|inactive
         */
        state: string

        reason: string
    }

    export interface VerificationRequestItem {
        id: number
        "user_id": number
        status: string
        note: string
        "reviewed_by": number
        "reviewed_at": string
        "created_at": string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AdminApproveVerification = this.AdminApproveVerification.bind(this)
            this.AdminRejectVerification = this.AdminRejectVerification.bind(this)
            this.CreateCity = this.CreateCity.bind(this)
            this.CreateShipment = this.CreateShipment.bind(this)
            this.GetAdminDashboardStats = this.GetAdminDashboardStats.bind(this)
            this.GetHistoricalSales = this.GetHistoricalSales.bind(this)
            this.GetKey = this.GetKey.bind(this)
            this.GetProductPerformance = this.GetProductPerformance.bind(this)
            this.GetRevenueAnalytics = this.GetRevenueAnalytics.bind(this)
            this.GetRuntimeSettings = this.GetRuntimeSettings.bind(this)
            this.GetSettingsHistory = this.GetSettingsHistory.bind(this)
            this.ListAuctions = this.ListAuctions.bind(this)
            this.ListCities = this.ListCities.bind(this)
            this.ListInvoices = this.ListInvoices.bind(this)
            this.ListOrders = this.ListOrders.bind(this)
            this.ListProducts = this.ListProducts.bind(this)
            this.ListRawSettings = this.ListRawSettings.bind(this)
            this.ListShipments = this.ListShipments.bind(this)
            this.ListUsers = this.ListUsers.bind(this)
            this.ListVerificationRequests = this.ListVerificationRequests.bind(this)
            this.UpdateCity = this.UpdateCity.bind(this)
            this.UpdateSettings = this.UpdateSettings.bind(this)
            this.UpdateShipment = this.UpdateShipment.bind(this)
            this.UpdateUserRole = this.UpdateUserRole.bind(this)
            this.UpdateUserState = this.UpdateUserState.bind(this)
        }

        public async AdminApproveVerification(id: number, params: users.ReviewVerificationRequest): Promise<users.ReviewVerificationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/verification/${encodeURIComponent(id)}/approve`, JSON.stringify(params))
            return await resp.json() as users.ReviewVerificationResponse
        }

        public async AdminRejectVerification(id: number, params: users.ReviewVerificationRequest): Promise<users.ReviewVerificationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/verification/${encodeURIComponent(id)}/reject`, JSON.stringify(params))
            return await resp.json() as users.ReviewVerificationResponse
        }

        public async CreateCity(params: CreateCityRequest): Promise<ListCitiesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/cities`, JSON.stringify(params))
            return await resp.json() as ListCitiesResponse
        }

        public async CreateShipment(params: CreateShipmentRequest): Promise<AdminShipmentItem> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/shipments`, JSON.stringify(params))
            return await resp.json() as AdminShipmentItem
        }

        public async GetAdminDashboardStats(): Promise<AdminDashboardStats> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/dashboard/stats`)
            return await resp.json() as AdminDashboardStats
        }

        /**
         * GetHistoricalSales returns historical sales and auction data
         */
        public async GetHistoricalSales(): Promise<HistoricalSalesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/analytics/sales`)
            return await resp.json() as HistoricalSalesResponse
        }

        public async GetKey(params: GetKeyRequest): Promise<GetKeyResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                key: params.Key,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/system-settings/get`, undefined, {query})
            return await resp.json() as GetKeyResponse
        }

        /**
         * GetProductPerformance returns product performance analytics by category
         */
        public async GetProductPerformance(): Promise<ProductPerformanceResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/analytics/products`)
            return await resp.json() as ProductPerformanceResponse
        }

        /**
         * GetRevenueAnalytics returns detailed revenue analytics over time
         */
        public async GetRevenueAnalytics(): Promise<RevenueAnalyticsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/analytics/revenue`)
            return await resp.json() as RevenueAnalyticsResponse
        }

        public async GetRuntimeSettings(): Promise<RuntimeSettingsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/system-settings/runtime`)
            return await resp.json() as RuntimeSettingsResponse
        }

        public async GetSettingsHistory(params: SettingsHistoryRequest): Promise<SettingsHistoryResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                key:   params.Key,
                limit: String(params.Limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/system-settings/history`, undefined, {query})
            return await resp.json() as SettingsHistoryResponse
        }

        public async ListAuctions(params: ListAuctionsRequest): Promise<ListAuctionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.Limit),
                page:   String(params.Page),
                q:      params.Q,
                status: params.Status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/auctions`, undefined, {query})
            return await resp.json() as ListAuctionsResponse
        }

        public async ListCities(): Promise<ListCitiesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/cities`)
            return await resp.json() as ListCitiesResponse
        }

        public async ListInvoices(params: ListInvoicesRequest): Promise<ListInvoicesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:      String(params.Limit),
                "order_id": String(params.OrderID),
                page:       String(params.Page),
                status:     params.Status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/invoices`, undefined, {query})
            return await resp.json() as ListInvoicesResponse
        }

        public async ListOrders(params: ListOrdersRequest): Promise<ListOrdersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:     String(params.Limit),
                page:      String(params.Page),
                source:    params.Source,
                status:    params.Status,
                "user_id": String(params.UserID),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/orders`, undefined, {query})
            return await resp.json() as ListOrdersResponse
        }

        public async ListProducts(params: ListProductsRequest): Promise<ListProductsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.Limit),
                page:   String(params.Page),
                q:      params.Q,
                status: params.Status,
                type:   params.Type,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/products`, undefined, {query})
            return await resp.json() as ListProductsResponse
        }

        public async ListRawSettings(): Promise<ListRawSettingsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/system-settings`)
            return await resp.json() as ListRawSettingsResponse
        }

        public async ListShipments(params: ListShipmentsRequest): Promise<ListShipmentsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "company_id": String(params.CompanyID),
                limit:        String(params.Limit),
                "order_id":   String(params.OrderID),
                page:         String(params.Page),
                status:       params.Status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/shipments`, undefined, {query})
            return await resp.json() as ListShipmentsResponse
        }

        public async ListUsers(params: ListUsersRequest): Promise<ListUsersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: String(params.Limit),
                page:  String(params.Page),
                q:     params.Q,
                role:  params.Role,
                state: params.State,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/users`, undefined, {query})
            return await resp.json() as ListUsersResponse
        }

        public async ListVerificationRequests(params: ListVerificationRequestsRequest): Promise<ListVerificationRequestsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.Limit),
                page:   String(params.Page),
                status: params.Status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/verification/requests`, undefined, {query})
            return await resp.json() as ListVerificationRequestsResponse
        }

        public async UpdateCity(id: number, params: UpdateCityRequest): Promise<ListCitiesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/admin/cities/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as ListCitiesResponse
        }

        public async UpdateSettings(params: UpdateSettingsRequest): Promise<UpdateSettingsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/system-settings`, JSON.stringify(params))
            return await resp.json() as UpdateSettingsResponse
        }

        public async UpdateShipment(id: number, params: UpdateShipmentRequest): Promise<AdminShipmentItem> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/admin/shipments/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as AdminShipmentItem
        }

        public async UpdateUserRole(id: number, params: UpdateUserRoleRequest): Promise<AdminUserItem> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/users/${encodeURIComponent(id)}/role`, JSON.stringify(params))
            return await resp.json() as AdminUserItem
        }

        public async UpdateUserState(id: number, params: UpdateUserStateRequest): Promise<AdminUserItem> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/users/${encodeURIComponent(id)}/state`, JSON.stringify(params))
            return await resp.json() as AdminUserItem
        }
    }
}

export namespace auctions {
    /**
     * AuctionDetailResponse represents detailed auction with bids
     */
    export interface AuctionDetailResponse {
        auction: AuctionResponse
        bids: BidResponse[]
        "bid_count": number
        "reserve_status": ReserveStatusResponse
    }

    /**
     * AuctionListFiltersDTO represents filters for listing auctions
     */
    export interface AuctionListFiltersDTO {
        status: string
        "ending_soon": boolean
        q: string
        page: number
        limit: number
        sort: string
    }

    /**
     * AuctionListResponse represents paginated auction list
     */
    export interface AuctionListResponse {
        auctions: AuctionResponse[]
        total: number
        page: number
        limit: number
    }

    /**
     * AuctionOutcome represents the outcome of an ended auction
     */
    export type AuctionOutcome = string

    /**
     * AuctionResponse represents auction data in API responses
     */
    export interface AuctionResponse {
        id: number
        "product_id": number
        "start_price": number
        "bid_step": number
        "reserve_price": number
        "current_price": number
        "bids_count": number
        "highest_bidder": string
        "reserve_met": boolean
        "start_at": string
        "end_at": string
        "anti_sniping_minutes": number
        status: string
        "extensions_count": number
        "max_extensions_override": number
        "time_remaining": number
        "created_at": string
        "updated_at": string
    }

    /**
     * BidResponse represents bid data in API responses
     */
    export interface BidResponse {
        id: number
        "auction_id": number
        "user_id": number
        amount: number
        "bidder_name": string
        "bidder_city": string
        "created_at": string
    }

    /**
     * BidResponseDTO represents the response data for a bid
     */
    export interface BidResponseDTO {
        id: number
        "auction_id": number
        "user_id": number
        amount: number
        "bidder_name": string
        "bidder_city": string
        "created_at": string
    }

    /**
     * CancelAuctionDTO represents the data transfer object for canceling an auction
     */
    export interface CancelAuctionDTO {
        reason: string
    }

    /**
     * CreateAuctionDTO represents the data transfer object for creating an auction
     */
    export interface CreateAuctionDTO {
        "product_id": number
        "start_price": number
        "bid_step": number
        "reserve_price": number
        "start_at": string
        "end_at": string
        "anti_sniping_minutes": number
        "max_extensions_override": number
    }

    /**
     * MarkWinnerUnpaidDTO represents request to mark winner as unpaid
     */
    export interface MarkWinnerUnpaidDTO {
        reason: string
    }

    /**
     * MessageResponse represents a simple message response
     */
    export interface MessageResponse {
        success: boolean
        message: string
    }

    /**
     * PlaceBidDTO represents the data transfer object for placing a bid
     */
    export interface PlaceBidDTO {
        amount: number
    }

    /**
     * ProcessAuctionEndResponse represents the response for auction end processing
     */
    export interface ProcessAuctionEndResponse {
        "auction_id": number
        outcome: AuctionOutcome
        "winner_bid": BidResponseDTO
        "highest_bid": BidResponseDTO
        "reserve_price": number
        "order_id": number
        message: string
        "ended_at": string
    }

    /**
     * RateLimitStatus represents current rate limiting status for a user
     */
    export interface RateLimitStatus {
        "user_id": number
        "bids_per_minute": number
        "current_bid_count": number
        "bids_remaining": number
        "payment_init_per_5min": number
        "current_payment_count": number
        "payment_remaining": number
        "reset_time": string
    }

    /**
     * RemoveBidDTO represents the data transfer object for removing a bid
     */
    export interface RemoveBidDTO {
        reason: string
    }

    /**
     * RemoveBidResponse represents the response after removing a bid
     */
    export interface RemoveBidResponse {
        success: boolean
        message: string
        "new_current_price": number
        "extensions_removed": number
        "affected_bidders_count": number
    }

    /**
     * ReserveStatusResponse represents reserve price status response
     */
    export interface ReserveStatusResponse {
        "has_reserve": boolean
        "reserve_met": boolean
        "amount_to_reserve": number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.CancelAuction = this.CancelAuction.bind(this)
            this.CreateAuction = this.CreateAuction.bind(this)
            this.GetAuction = this.GetAuction.bind(this)
            this.GetRateLimitStatus = this.GetRateLimitStatus.bind(this)
            this.GetReserveStatus = this.GetReserveStatus.bind(this)
            this.HandleSSE = this.HandleSSE.bind(this)
            this.HandleWebSocket = this.HandleWebSocket.bind(this)
            this.ListAuctions = this.ListAuctions.bind(this)
            this.MarkWinnerUnpaid = this.MarkWinnerUnpaid.bind(this)
            this.PlaceBid = this.PlaceBid.bind(this)
            this.ProcessAuctionEnd = this.ProcessAuctionEnd.bind(this)
            this.RemoveBid = this.RemoveBid.bind(this)
        }

        /**
         * CancelAuction cancels a live or scheduled auction (Admin only)
         */
        public async CancelAuction(id: string, params: CancelAuctionDTO): Promise<MessageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auctions/${encodeURIComponent(id)}/cancel`, JSON.stringify(params))
            return await resp.json() as MessageResponse
        }

        /**
         * CreateAuction creates a new auction (Admin only)
         */
        public async CreateAuction(params: CreateAuctionDTO): Promise<AuctionResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auctions`, JSON.stringify(params))
            return await resp.json() as AuctionResponse
        }

        /**
         * GetAuction gets auction details with bid history
         */
        public async GetAuction(id: string): Promise<AuctionDetailResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/auctions/${encodeURIComponent(id)}`)
            return await resp.json() as AuctionDetailResponse
        }

        /**
         * GetRateLimitStatus gets current rate limit status for the user
         */
        public async GetRateLimitStatus(): Promise<RateLimitStatus> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/auction-rate-limit`)
            return await resp.json() as RateLimitStatus
        }

        /**
         * GetReserveStatus gets reserve price status for an auction
         */
        public async GetReserveStatus(id: string): Promise<ReserveStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/auctions/${encodeURIComponent(id)}/reserve-status`)
            return await resp.json() as ReserveStatusResponse
        }

        /**
         * HandleSSE handles Server-Sent Events connections
         */
        public async HandleSSE(method: "GET", id: string, body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/auctions/${encodeURIComponent(id)}/events`, body, options)
        }

        /**
         * HandleWebSocket handles WebSocket connections - UPDATED IMPLEMENTATION
         */
        public async HandleWebSocket(method: "GET", id: string, body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/auctions/${encodeURIComponent(id)}/ws`, body, options)
        }

        /**
         * ListAuctions lists auctions with filtering and pagination
         */
        public async ListAuctions(params: AuctionListFiltersDTO): Promise<AuctionListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "ending_soon": String(params["ending_soon"]),
                limit:         String(params.limit),
                page:          String(params.page),
                query:         params.q,
                sort:          params.sort,
                status:        params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/auctions`, undefined, {query})
            return await resp.json() as AuctionListResponse
        }

        /**
         * MarkWinnerUnpaid marks the auction winner as unpaid (Admin only)
         */
        public async MarkWinnerUnpaid(id: string, params: MarkWinnerUnpaidDTO): Promise<MessageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auctions/${encodeURIComponent(id)}/mark-winner-unpaid`, JSON.stringify(params))
            return await resp.json() as MessageResponse
        }

        /**
         * PlaceBid places a bid on an auction (Verified users only)
         */
        public async PlaceBid(id: string, params: PlaceBidDTO): Promise<BidResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auctions/${encodeURIComponent(id)}/bid`, JSON.stringify(params))
            return await resp.json() as BidResponse
        }

        /**
         * ProcessAuctionEnd processes the end of an auction (Internal/Admin)
         */
        public async ProcessAuctionEnd(id: string): Promise<ProcessAuctionEndResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auctions/${encodeURIComponent(id)}/process-end`)
            return await resp.json() as ProcessAuctionEndResponse
        }

        /**
         * RemoveBid removes a bid (Admin only)
         */
        public async RemoveBid(id: string, params: RemoveBidDTO): Promise<RemoveBidResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/bids/${encodeURIComponent(id)}/remove`, JSON.stringify(params))
            return await resp.json() as RemoveBidResponse
        }
    }
}

export namespace auth {
    /**
     * LogoutResponse represents the logout response
     */
    export interface LogoutResponse {
        message: string
        success: boolean
    }

    /**
     * RegisterRequest represents the user registration request
     * Phone is no longer provided here; it must be verified beforehand via /auth/phone/start and /auth/phone/verify
     */
    export interface RegisterRequest {
        name: string
        email: string
        "city_id": number
        password: string
        "phone_verification_token": string
        /**
         * Deprecated: Phone is no longer accepted in the registration flow. Use /auth/phone/start and /auth/phone/verify.
         */
        phone: string
    }

    /**
     * RegisterResponse represents the user registration response
     */
    export interface RegisterResponse {
        user: UserInfo
        "requires_email_verification": boolean
        message: string
    }

    /**
     * ResendVerificationRequest represents the resend verification request
     */
    export interface ResendVerificationRequest {
        email: string
    }

    /**
     * ResendVerificationResponse represents the resend verification response
     */
    export interface ResendVerificationResponse {
        message: string
        success: boolean
    }

    /**
     * StartPhoneRequest starts phone verification by generating an OTP
     */
    export interface StartPhoneRequest {
        phone: string
    }

    export interface StartPhoneResponse {
        message: string
        success: boolean
    }

    /**
     * UserInfo represents user information
     */
    export interface UserInfo {
        id: number
        name: string
        email: string
        phone: string
        "city_id": number
        role: string
    }

    /**
     * VerifyEmailRequest represents the email verification request
     */
    export interface VerifyEmailRequest {
        email: string
        code: string
    }

    /**
     * VerifyEmailResponse represents the email verification response
     */
    export interface VerifyEmailResponse {
        message: string
        success: boolean
    }

    /**
     * VerifyPhoneRequest verifies the OTP and returns a short-lived token to be used during registration
     */
    export interface VerifyPhoneRequest {
        phone: string
        code: string
    }

    export interface VerifyPhoneResponse {
        "phone_verification_token": string
        "expires_at": string
        success: boolean
        message: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.LoginRaw = this.LoginRaw.bind(this)
            this.Logout = this.Logout.bind(this)
            this.RefreshRaw = this.RefreshRaw.bind(this)
            this.Register = this.Register.bind(this)
            this.ResendVerification = this.ResendVerification.bind(this)
            this.StartPhone = this.StartPhone.bind(this)
            this.VerifyEmail = this.VerifyEmail.bind(this)
            this.VerifyPhoneAPI = this.VerifyPhoneAPI.bind(this)
        }

        /**
         * Login authenticates a user and sets HttpOnly refresh cookie; returns access token in JSON
         */
        public async LoginRaw(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/auth/login`, body, options)
        }

        /**
         * Logout invalidates the user's session and tokens
         */
        public async Logout(): Promise<LogoutResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/logout`)
            return await resp.json() as LogoutResponse
        }

        /**
         * RefreshToken generates new access/refresh tokens and rotates refresh cookie
         */
        public async RefreshRaw(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/auth/refresh`, body, options)
        }

        /**
         * Register creates a new user account
         */
        public async Register(params: RegisterRequest): Promise<RegisterResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/register`, JSON.stringify(params))
            return await resp.json() as RegisterResponse
        }

        /**
         * ResendVerification resends the email verification code
         */
        public async ResendVerification(params: ResendVerificationRequest): Promise<ResendVerificationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/resend-verification`, JSON.stringify(params))
            return await resp.json() as ResendVerificationResponse
        }

        /**
         * StartPhone begins phone verification by generating and (for now) returning a 4-digit OTP
         */
        public async StartPhone(params: StartPhoneRequest): Promise<StartPhoneResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/phone/start`, JSON.stringify(params))
            return await resp.json() as StartPhoneResponse
        }

        /**
         * VerifyEmail verifies a user's email address
         */
        public async VerifyEmail(params: VerifyEmailRequest): Promise<VerifyEmailResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/verify-email`, JSON.stringify(params))
            return await resp.json() as VerifyEmailResponse
        }

        /**
         * VerifyPhone verifies the OTP and returns a short-lived token to be used in registration
         */
        public async VerifyPhoneAPI(params: VerifyPhoneRequest): Promise<VerifyPhoneResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/phone/verify`, JSON.stringify(params))
            return await resp.json() as VerifyPhoneResponse
        }
    }
}

export namespace cart {
    /**
     * طلب إضافة للسلة
     */
    export interface AddToCartRequest {
        "product_id": number
        /**
         * للمستلزمات فقط؛ للحمام دائماً 1
         */
        qty: number
    }

    /**
     * الاستجابة العامة للسلة
     */
    export interface CartResponse {
        pigeons: PigeonCartItem[]
        supplies: SupplyCartItem[]
    }

    /**
     * عنصر سلة محلي للحمام (من العميل)
     */
    export interface LocalPigeonItem {
        "product_id": number
    }

    /**
     * عنصر سلة محلي للمستلزمات (من العميل)
     */
    export interface LocalSupplyItem {
        "product_id": number
        qty: number
    }

    /**
     * طلب دمج السلة المحلية مع سلة السيرفر
     */
    export interface MergeCartRequest {
        "local_pigeons": LocalPigeonItem[]
        "local_supplies": LocalSupplyItem[]
    }

    /**
     * استجابة دمج السلة
     */
    export interface MergeCartResponse {
        "merge_results": {
            "successful_pigeons": number[]
            "successful_supplies": number[]
            "failed_pigeons": {
                "product_id": number
                reason: string
            }[]
            "failed_supplies": {
                "product_id": number
                reason: string
            }[]
        }
    }

    /**
     * عنصر حمام في السلة
     */
    export interface PigeonCartItem {
        "product_id": number
        title: string
        "price_net": number
        "price_gross": number
        /**
         * ISO8601
         */
        "reserved_expires_at": string
    }

    /**
     * عنصر مستلزم في السلة
     */
    export interface SupplyCartItem {
        "reservation_id": number
        "product_id": number
        title: string
        "price_net": number
        "price_gross": number
        qty: number
        /**
         * ISO8601
         */
        "expires_at": string
    }

    /**
     * طلب تحديث عنصر سلة (للمستلزمات فقط)
     */
    export interface UpdateCartItemRequest {
        qty: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AddToCart = this.AddToCart.bind(this)
            this.DeleteCartItem = this.DeleteCartItem.bind(this)
            this.GetCart = this.GetCart.bind(this)
            this.GetCartRaw = this.GetCartRaw.bind(this)
            this.MergeCart = this.MergeCart.bind(this)
            this.MergeCartRaw = this.MergeCartRaw.bind(this)
            this.UpdateCartItem = this.UpdateCartItem.bind(this)
        }

        public async AddToCart(params: AddToCartRequest): Promise<CartResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/cart`, JSON.stringify(params))
            return await resp.json() as CartResponse
        }

        public async DeleteCartItem(id: string): Promise<CartResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/cart/items/${encodeURIComponent(id)}`)
            return await resp.json() as CartResponse
        }

        public async GetCart(): Promise<CartResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/cart`)
            return await resp.json() as CartResponse
        }

        public async GetCartRaw(method: "GET", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/cart/raw`, body, options)
        }

        public async MergeCart(params: MergeCartRequest): Promise<MergeCartResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/cart/merge`, JSON.stringify(params))
            return await resp.json() as MergeCartResponse
        }

        public async MergeCartRaw(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/cart/merge/raw`, body, options)
        }

        public async UpdateCartItem(id: string, params: UpdateCartItemRequest): Promise<CartResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/cart/items/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as CartResponse
        }
    }
}

export namespace catalog {
    /**
     * AnswerQuestionRequest represents an admin answer to a question
     */
    export interface AnswerQuestionRequest {
        answer: string
    }

    /**
     * AuctionQuestion represents a user question on an auction
     */
    export interface AuctionQuestion {
        id: number
        "auction_id": number
        "user_id": number
        question: string
        answer: string
        "answered_by": number
        status: QuestionStatus
        "created_at": string
        "answered_at": string
        "updated_at": string
    }

    /**
     * AuctionQuestionsResponse wraps auction questions
     */
    export interface AuctionQuestionsResponse {
        items: AuctionQuestion[]
    }

    /**
     * CreateProductRequest represents a request to create a new product
     */
    export interface CreateProductRequest {
        type: ProductType
        title: string
        description: string
        "price_net": number
        /**
         * Pigeon-specific fields
         */
        "ring_number": string

        sex: PigeonSex
        "birth_date": string
        lineage: string
        "origin_proof_url": string
        "origin_proof_file_ref": string
        /**
         * Supply-specific fields
         */
        sku: string

        "stock_qty": number
        "low_stock_threshold": number
    }

    /**
     * CreateProductResponse represents the response after creating a product
     */
    export interface CreateProductResponse {
        product: ProductWithDetails
    }

    /**
     * CreateQuestionRequest represents a request to create a new question
     */
    export interface CreateQuestionRequest {
        question: string
    }

    /**
     * DeleteProductResponse represents the response after deleting a product
     */
    export interface DeleteProductResponse {
        message: string
        id: string
    }

    /**
     * FinalizeMediaRequest represents draft items to attach to a product
     */
    export interface FinalizeMediaRequest {
        "session_id": string
        files: {
            kind: string
            "gcs_path": string
            "thumb_path": string
            size: number
            name: string
            "mime_type": string
        }[]
        links: {
            kind: string
            url: string
        }[]
    }

    export interface FinalizeMediaResponse {
        "product_id": number
        created: number
    }

    /**
     * HealthCheckResponse represents a health check response
     */
    export interface HealthCheckResponse {
        status: string
        timestamp: string
    }

    /**
     * ListQuestionsAdminRequest represents filters for admin listing
     */
    export interface ListQuestionsAdminRequest {
        ProductID: number
        AuctionID: number
        /**
         * pending/approved/rejected
         */
        StatusStr: string
    }

    /**
     * Media represents media files associated with products
     */
    export interface Media {
        id: number
        "product_id": number
        kind: MediaKind
        "gcs_path": string
        "thumb_path": string
        "watermark_applied": boolean
        "file_size": number
        "mime_type": string
        "original_filename": string
        "archived_at": string
        "created_at": string
        "updated_at": string
    }

    /**
     * MediaKind represents the type of media
     */
    export type MediaKind = string

    /**
     * MessageResponse is a simple message wrapper
     */
    export interface MessageResponse {
        message: string
    }

    /**
     * PaginationMeta represents pagination metadata
     */
    export interface PaginationMeta {
        page: number
        limit: number
        "total_items": number
        "total_pages": number
        "has_next": boolean
        "has_prev": boolean
    }

    /**
     * PigeonSex represents the sex of a pigeon
     */
    export type PigeonSex = string

    /**
     * ProductDetailResponse represents the response for getting product details
     */
    export interface ProductDetailResponse {
        product: ProductWithDetails
    }

    /**
     * ProductMediaListResponse represents the response for getting product media list
     */
    export interface ProductMediaListResponse {
        "product_id": number
        media: Media[]
    }

    /**
     * ProductQuestion represents a user question on a product
     */
    export interface ProductQuestion {
        id: number
        "product_id": number
        "user_id": number
        question: string
        answer: string
        "answered_by": number
        status: QuestionStatus
        "created_at": string
        "answered_at": string
        "updated_at": string
    }

    /**
     * ProductQuestionsResponse wraps product questions
     */
    export interface ProductQuestionsResponse {
        items: ProductQuestion[]
    }

    /**
     * ProductStatus represents the status of a product
     */
    export type ProductStatus = string

    /**
     * ProductSummary represents a product summary for listings
     */
    export interface ProductSummary {
        id: number
        type: ProductType
        title: string
        slug: string
        description: string
        "price_net": number
        /**
         * Calculated with current VAT
         */
        "price_gross": number

        status: ProductStatus
        "created_at": string
        /**
         * Type-specific summary info
         */
        "ring_number": string

        /**
         * For pigeons
         */
        sex: PigeonSex

        /**
         * For pigeons
         */
        "birth_date": string

        /**
         * For pigeons
         */
        lineage: string

        /**
         * For supplies
         */
        "stock_qty": number

        /**
         * Media info
         */
        "thumbnail_url": string

        "media_count": number
    }

    /**
     * ProductType represents the type of product
     */
    export type ProductType = string

    /**
     * ProductWithDetails represents a complete product with all its details
     */
    export interface ProductWithDetails {
        media: Media[]
    }

    /**
     * ProductsListRequest represents the request to list products with filters
     */
    export interface ProductsListRequest {
        /**
         * Filter by product type (pigeon/supply)
         */
        TypeStr: string

        /**
         * Filter by product status
         */
        StatusStr: string

        /**
         * Search query (title, description)
         */
        Q: string

        /**
         * Minimum price filter (0 for no filter)
         */
        PriceMin: number

        /**
         * Maximum price filter (0 for no filter)
         */
        PriceMax: number

        /**
         * Page number (default: 1)
         */
        Page: number

        /**
         * Items per page (default: 20, max: 100)
         */
        Limit: number

        /**
         * Sort order: "newest", "oldest", "price_asc", "price_desc"
         */
        SortStr: string
    }

    /**
     * ProductsListResponse represents the response for listing products
     */
    export interface ProductsListResponse {
        products: ProductSummary[]
        pagination: PaginationMeta
    }

    /**
     * QuestionStatus represents moderation/answering status for Q&A
     */
    export type QuestionStatus = string

    /**
     * SetQuestionStatusRequest represents a moderation status update
     */
    export interface SetQuestionStatusRequest {
        status: string
    }

    /**
     * UpdateMediaRequest represents a request to update media
     */
    export interface UpdateMediaRequest {
        "product_id": number
        "media_id": number
        /**
         * Set to archive/unarchive
         */
        "archived_at": string
    }

    /**
     * UpdateMediaResponse represents the response after updating media
     */
    export interface UpdateMediaResponse {
        media: Media
    }

    /**
     * UpdateProductRequest represents a request to update an existing product
     */
    export interface UpdateProductRequest {
        title: string
        /**
         * Double pointer to allow setting to null
         */
        description: string

        "price_net": number
        status: ProductStatus
        /**
         * Pigeon-specific fields
         */
        "ring_number": string

        sex: PigeonSex
        "birth_date": string
        lineage: string
        "origin_proof_url": string
        "origin_proof_file_ref": string
        /**
         * Supply-specific fields
         */
        sku: string

        "stock_qty": number
        "low_stock_threshold": number
    }

    /**
     * UpdateProductResponse represents the response after updating a product
     */
    export interface UpdateProductResponse {
        product: ProductWithDetails
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AdminAnswerAuctionQuestion = this.AdminAnswerAuctionQuestion.bind(this)
            this.AdminAnswerProductQuestion = this.AdminAnswerProductQuestion.bind(this)
            this.AdminListAuctionQuestions = this.AdminListAuctionQuestions.bind(this)
            this.AdminListProductQuestions = this.AdminListProductQuestions.bind(this)
            this.AdminSetAuctionQuestionStatus = this.AdminSetAuctionQuestionStatus.bind(this)
            this.AdminSetProductQuestionStatus = this.AdminSetProductQuestionStatus.bind(this)
            this.CreateProduct = this.CreateProduct.bind(this)
            this.CreateProductQuestion = this.CreateProductQuestion.bind(this)
            this.DeleteProduct = this.DeleteProduct.bind(this)
            this.FinalizeDraftMedia = this.FinalizeDraftMedia.bind(this)
            this.GetProduct = this.GetProduct.bind(this)
            this.GetProductMediaList = this.GetProductMediaList.bind(this)
            this.GetProductQuestions = this.GetProductQuestions.bind(this)
            this.GetProducts = this.GetProducts.bind(this)
            this.HealthCheck = this.HealthCheck.bind(this)
            this.UpdateProduct = this.UpdateProduct.bind(this)
            this.UpdateProductMedia = this.UpdateProductMedia.bind(this)
            this.UploadMediaDraft = this.UploadMediaDraft.bind(this)
            this.UploadProductMedia = this.UploadProductMedia.bind(this)
        }

        /**
         * Admin: answer an auction question and approve it
         */
        public async AdminAnswerAuctionQuestion(qid: string, params: AnswerQuestionRequest): Promise<AuctionQuestion> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/catalog/admin/questions/auctions/${encodeURIComponent(qid)}/answer`, JSON.stringify(params))
            return await resp.json() as AuctionQuestion
        }

        /**
         * Admin: answer a product question and approve it
         */
        public async AdminAnswerProductQuestion(qid: string, params: AnswerQuestionRequest): Promise<ProductQuestion> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/catalog/admin/questions/products/${encodeURIComponent(qid)}/answer`, JSON.stringify(params))
            return await resp.json() as ProductQuestion
        }

        /**
         * Admin: list auction questions with filters
         */
        public async AdminListAuctionQuestions(params: ListQuestionsAdminRequest): Promise<AuctionQuestionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "auction_id": String(params.AuctionID),
                "product_id": String(params.ProductID),
                status:       params.StatusStr,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/catalog/admin/questions/auctions`, undefined, {query})
            return await resp.json() as AuctionQuestionsResponse
        }

        /**
         * Admin: list product questions with filters
         */
        public async AdminListProductQuestions(params: ListQuestionsAdminRequest): Promise<ProductQuestionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "auction_id": String(params.AuctionID),
                "product_id": String(params.ProductID),
                status:       params.StatusStr,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/catalog/admin/questions/products`, undefined, {query})
            return await resp.json() as ProductQuestionsResponse
        }

        /**
         * Admin: set auction question status
         */
        public async AdminSetAuctionQuestionStatus(qid: string, params: SetQuestionStatusRequest): Promise<MessageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/catalog/admin/questions/auctions/${encodeURIComponent(qid)}/status`, JSON.stringify(params))
            return await resp.json() as MessageResponse
        }

        /**
         * Admin: set product question status
         */
        public async AdminSetProductQuestionStatus(qid: string, params: SetQuestionStatusRequest): Promise<MessageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/catalog/admin/questions/products/${encodeURIComponent(qid)}/status`, JSON.stringify(params))
            return await resp.json() as MessageResponse
        }

        /**
         * CreateProduct creates a new product (Admin only)
         */
        public async CreateProduct(params: CreateProductRequest): Promise<CreateProductResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/products`, JSON.stringify(params))
            return await resp.json() as CreateProductResponse
        }

        /**
         * CreateProductQuestion creates a new question for a product (public)
         */
        public async CreateProductQuestion(id: string, params: CreateQuestionRequest): Promise<ProductQuestion> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/catalog/products/${encodeURIComponent(id)}/questions`, JSON.stringify(params))
            return await resp.json() as ProductQuestion
        }

        /**
         * DeleteProduct soft deletes a product (Admin only)
         */
        public async DeleteProduct(id: string): Promise<DeleteProductResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/products/${encodeURIComponent(id)}`)
            return await resp.json() as DeleteProductResponse
        }

        /**
         * FinalizeDraftMedia attaches previously uploaded draft items to a product by creating DB rows.
         */
        public async FinalizeDraftMedia(id: string, params: FinalizeMediaRequest): Promise<FinalizeMediaResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/products/${encodeURIComponent(id)}/media/finalize`, JSON.stringify(params))
            return await resp.json() as FinalizeMediaResponse
        }

        /**
         * GetProduct retrieves a single product by ID
         */
        public async GetProduct(id: string): Promise<ProductDetailResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/products/${encodeURIComponent(id)}`)
            return await resp.json() as ProductDetailResponse
        }

        /**
         * GetProductMediaList retrieves all media for a product (helper endpoint)
         */
        public async GetProductMediaList(id: string): Promise<ProductMediaListResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/products/${encodeURIComponent(id)}/media`)
            return await resp.json() as ProductMediaListResponse
        }

        /**
         * GetProductQuestions lists approved questions for a product (public)
         */
        public async GetProductQuestions(id: string): Promise<ProductQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/catalog/products/${encodeURIComponent(id)}/questions`)
            return await resp.json() as ProductQuestionsResponse
        }

        /**
         * GetProducts retrieves products with optional filtering and pagination
         */
        public async GetProducts(params: ProductsListRequest): Promise<ProductsListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:       String(params.Limit),
                page:        String(params.Page),
                "price_max": String(params.PriceMax),
                "price_min": String(params.PriceMin),
                q:           params.Q,
                sort:        params.SortStr,
                status:      params.StatusStr,
                type:        params.TypeStr,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/products`, undefined, {query})
            return await resp.json() as ProductsListResponse
        }

        /**
         * HealthCheck endpoint for catalog service
         */
        public async HealthCheck(): Promise<HealthCheckResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/catalog/health`)
            return await resp.json() as HealthCheckResponse
        }

        /**
         * UpdateProduct updates an existing product (Admin only)
         */
        public async UpdateProduct(id: string, params: UpdateProductRequest): Promise<UpdateProductResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/products/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateProductResponse
        }

        /**
         * UpdateProductMedia updates media properties (mainly for archiving)
         */
        public async UpdateProductMedia(productId: string, mediaId: string, params: UpdateMediaRequest): Promise<UpdateMediaResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/products/${encodeURIComponent(productId)}/media/${encodeURIComponent(mediaId)}`, JSON.stringify(params))
            return await resp.json() as UpdateMediaResponse
        }

        /**
         * UploadMediaDraft allows uploading draft media before a product exists.
         * It stores files in GCS and returns their paths without creating DB rows.
         */
        public async UploadMediaDraft(method: "POST", session_id: string, body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/media-drafts/${encodeURIComponent(session_id)}`, body, options)
        }

        /**
         * UploadProductMedia uploads media files for a product using raw endpoint for multipart support
         */
        public async UploadProductMedia(method: "POST", id: string, body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/products/${encodeURIComponent(id)}/media`, body, options)
        }
    }
}

export namespace certificates {
    export interface ListQuery {
        status: string
        page: number
        limit: number
    }

    export interface ListResponse {
        items: RequestItem[]
    }

    export interface MessageResponse {
        message: string
    }

    export interface RaceItem {
        id: number
        "race_name": string
        "race_date": string
        quantity: number
    }

    export interface RequestDetail {
        id: number
        "club_name": string
        status: string
        "excel_gcs_path": string
        "created_at": string
        races: RaceItem[]
    }

    export interface RequestItem {
        id: number
        "club_name": string
        status: string
        "created_at": string
    }

    export interface SetPINRequest {
        "new_pin": string
    }

    export interface StatusCheckRequest {
        pin: string
    }

    export interface StatusCheckResponse {
        id: number
        status: string
        "created_at": string
    }

    export interface UpdateStatusRequest {
        /**
         * approved | rejected | pending
         */
        status: string
    }

    export interface UpdateStatusResponse {
        id: number
        status: string
    }

    /**
     * VerifyPINResponse is a named response type to satisfy Encore schema requirements
     */
    export interface VerifyPINResponse {
        ok: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AdminGet = this.AdminGet.bind(this)
            this.AdminList = this.AdminList.bind(this)
            this.AdminSetStatus = this.AdminSetStatus.bind(this)
            this.MyGet = this.MyGet.bind(this)
            this.MyList = this.MyList.bind(this)
            this.SetPIN = this.SetPIN.bind(this)
            this.StatusCheck = this.StatusCheck.bind(this)
            this.SubmitPrintRequest = this.SubmitPrintRequest.bind(this)
            this.VerifyPIN = this.VerifyPIN.bind(this)
        }

        public async AdminGet(id: string): Promise<RequestDetail> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/certificates/print-requests/${encodeURIComponent(id)}`)
            return await resp.json() as RequestDetail
        }

        public async AdminList(params: ListQuery): Promise<ListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.limit),
                page:   String(params.page),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/certificates/print-requests`, undefined, {query})
            return await resp.json() as ListResponse
        }

        public async AdminSetStatus(id: string, params: UpdateStatusRequest): Promise<UpdateStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/certificates/print-requests/${encodeURIComponent(id)}/status`, JSON.stringify(params))
            return await resp.json() as UpdateStatusResponse
        }

        public async MyGet(id: string): Promise<RequestDetail> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/certificates/my/print-requests/${encodeURIComponent(id)}`)
            return await resp.json() as RequestDetail
        }

        public async MyList(params: ListQuery): Promise<ListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.limit),
                page:   String(params.page),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/certificates/my/print-requests`, undefined, {query})
            return await resp.json() as ListResponse
        }

        public async SetPIN(params: SetPINRequest): Promise<MessageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/certificates/settings/pin`, JSON.stringify(params))
            return await resp.json() as MessageResponse
        }

        public async StatusCheck(id: string, params: StatusCheckRequest): Promise<StatusCheckResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/certificates/print-requests/${encodeURIComponent(id)}/status-check`, JSON.stringify(params))
            return await resp.json() as StatusCheckResponse
        }

        public async SubmitPrintRequest(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/certificates/print-requests`, body, options)
        }

        public async VerifyPIN(params: SetPINRequest): Promise<VerifyPINResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/certificates/pin/verify`, JSON.stringify(params))
            return await resp.json() as VerifyPINResponse
        }
    }
}

export namespace checkout {
    export interface CheckoutHeaders {
        IdemKey: string
    }

    export interface CheckoutResponse {
        "invoice_id": number
        status: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.Checkout = this.Checkout.bind(this)
        }

        public async Checkout(params: CheckoutHeaders): Promise<CheckoutResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "idempotency-key": params.IdemKey,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/checkout`, undefined, {headers})
            return await resp.json() as CheckoutResponse
        }
    }
}

export namespace cities {
    /**
     * CitiesResponse is the response type for listing enabled cities.
     */
    export interface CitiesResponse {
        items: City[]
    }

    /**
     * City represents a city with its localized names and net shipping fee.
     */
    export interface City {
        id: number
        "name_ar": string
        "name_en": string
        "shipping_fee_net": number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.ListEnabledCities = this.ListEnabledCities.bind(this)
        }

        /**
         * ListEnabledCities lists enabled cities with their localized names and net shipping fee.
         */
        public async ListEnabledCities(): Promise<CitiesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/cities`)
            return await resp.json() as CitiesResponse
        }
    }
}

export namespace jobs {
    export interface RunAllCronResponse {
        "auction_tick": string
        "payment_cleaner": string
        "daily_admin_digest": string
        "payment_cleaner_stats": worker.CleanupResponse
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.Metrics = this.Metrics.bind(this)
            this.RunAllCronJobs = this.RunAllCronJobs.bind(this)
            this.RunAuctionTickAdmin = this.RunAuctionTickAdmin.bind(this)
            this.RunDailyAdminDigestAdmin = this.RunDailyAdminDigestAdmin.bind(this)
            this.RunPaymentCleanerAdmin = this.RunPaymentCleanerAdmin.bind(this)
        }

        public async Metrics(method: "GET", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/metrics`, body, options)
        }

        public async RunAllCronJobs(): Promise<RunAllCronResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/cron/run-all`)
            return await resp.json() as RunAllCronResponse
        }

        public async RunAuctionTickAdmin(): Promise<void> {
            await this.baseClient.callTypedAPI("POST", `/admin/cron/auction-tick`)
        }

        public async RunDailyAdminDigestAdmin(): Promise<void> {
            await this.baseClient.callTypedAPI("POST", `/admin/cron/daily-admin-digest`)
        }

        public async RunPaymentCleanerAdmin(): Promise<worker.CleanupResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/cron/payment-cleaner`)
            return await resp.json() as worker.CleanupResponse
        }
    }
}

export namespace notifications {
    /**
     * GetRetentionConfigResponse استجابة إعدادات الاحتفاظ
     */
    export interface GetRetentionConfigResponse {
        config: RetentionConfig
    }

    /**
     * GetTemplatesResponse استجابة القوالب المتاحة
     */
    export interface GetTemplatesResponse {
        templates: TemplateInfo[]
    }

    /**
     * ListQuery معلمات التصفح
     */
    export interface ListQuery {
        limit: number
        offset: number
    }

    export interface ListResponse {
        items: Notification[]
    }

    /**
     * MarkAsReadRequest طلب وضع علامة مقروء
     */
    export interface MarkAsReadRequest {
        "notification_id": number
    }

    /**
     * MarkAsReadResponse استجابة وضع علامة مقروء
     */
    export interface MarkAsReadResponse {
        success: boolean
    }

    export interface Notification {
        id: number
        "user_id": number
        channel: string
        "template_id": string
        payload: JSONValue
        status: string
        "created_at": string
    }

    /**
     * RetentionConfig إعدادات الاحتفاظ بالإشعارات
     */
    export interface RetentionConfig {
        /**
         * الاحتفاظ بالإشعارات المرسلة لمدة 90 يوم
         */
        SentRetentionDays: number

        /**
         * الاحتفاظ بالإشعارات الفاشلة لمدة 30 يوم
         */
        FailedRetentionDays: number

        /**
         * الاحتفاظ بالإشعارات المقروءة لمدة 60 يوم
         */
        ReadRetentionDays: number

        /**
         * أرشفة الإشعارات المهمة بدلاً من حذفها
         */
        ArchiveImportant: boolean
    }

    /**
     * TemplateInfo تمثيل معلومات القالب
     */
    export interface TemplateInfo {
        id: string
        description: string
        languages: string[]
    }

    /**
     * TestEmailRequest طلب اختبار البريد الإلكتروني
     */
    export interface TestEmailRequest {
        email: string
        "template_id": string
        /**
         * ar or en
         */
        language: string

        data: JSONValue
    }

    /**
     * TestEmailResponse استجابة اختبار البريد
     */
    export interface TestEmailResponse {
        success: boolean
        message: string
        "email_id": number
    }

    /**
     * UpdateRetentionConfigRequest طلب تحديث إعدادات الاحتفاظ
     */
    export interface UpdateRetentionConfigRequest {
        "sent_retention_days": number
        "failed_retention_days": number
        "read_retention_days": number
        "archive_important": boolean
    }

    /**
     * UpdateRetentionConfigResponse استجابة تحديث إعدادات الاحتفاظ
     */
    export interface UpdateRetentionConfigResponse {
        success: boolean
        config: RetentionConfig
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.GetRetentionConfig = this.GetRetentionConfig.bind(this)
            this.GetTemplates = this.GetTemplates.bind(this)
            this.List = this.List.bind(this)
            this.MarkAsRead = this.MarkAsRead.bind(this)
            this.TestEmail = this.TestEmail.bind(this)
            this.UpdateRetentionConfig = this.UpdateRetentionConfig.bind(this)
        }

        public async GetRetentionConfig(): Promise<GetRetentionConfigResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/notifications/retention/config`)
            return await resp.json() as GetRetentionConfigResponse
        }

        public async GetTemplates(): Promise<GetTemplatesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/notifications/templates`)
            return await resp.json() as GetTemplatesResponse
        }

        public async List(params: ListQuery): Promise<ListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  String(params.limit),
                offset: String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/notifications`, undefined, {query})
            return await resp.json() as ListResponse
        }

        public async MarkAsRead(params: MarkAsReadRequest): Promise<MarkAsReadResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/notifications/read`, JSON.stringify(params))
            return await resp.json() as MarkAsReadResponse
        }

        public async TestEmail(params: TestEmailRequest): Promise<TestEmailResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/notifications/email/test`, JSON.stringify(params))
            return await resp.json() as TestEmailResponse
        }

        public async UpdateRetentionConfig(params: UpdateRetentionConfigRequest): Promise<UpdateRetentionConfigResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/notifications/retention/config`, JSON.stringify(params))
            return await resp.json() as UpdateRetentionConfigResponse
        }
    }
}

export namespace order_mgmt {
    export interface InvoiceSummary {
        id: number
        number: string
        status: string
    }

    export interface InvoicesResponse {
        items: InvoiceSummary[]
    }

    export interface OrderDetail {
        id: number
        status: string
        items: OrderItem[]
        totals: OrderTotals
    }

    export interface OrderItem {
        "product_id": number
        qty: number
        "unit_price_gross": number
        "line_total_gross": number
    }

    export interface OrderSummary {
        id: number
        status: string
        "grand_total": number
        "created_at": string
    }

    export interface OrderTotals {
        "subtotal_gross": number
        "vat_amount": number
        "shipping_fee_gross": number
        "grand_total": number
    }

    export interface OrdersResponse {
        items: OrderSummary[]
    }

    export interface Paginate {
        Page: number
        Limit: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.GetInvoice = this.GetInvoice.bind(this)
            this.GetOrder = this.GetOrder.bind(this)
            this.GetOrderInvoice = this.GetOrderInvoice.bind(this)
            this.ListMyInvoices = this.ListMyInvoices.bind(this)
            this.ListMyOrders = this.ListMyOrders.bind(this)
        }

        public async GetInvoice(id: string): Promise<InvoiceSummary> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/invoices/${encodeURIComponent(id)}`)
            return await resp.json() as InvoiceSummary
        }

        public async GetOrder(id: string): Promise<OrderDetail> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/orders/${encodeURIComponent(id)}`)
            return await resp.json() as OrderDetail
        }

        public async GetOrderInvoice(id: string): Promise<InvoiceSummary> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/orders/${encodeURIComponent(id)}/invoice`)
            return await resp.json() as InvoiceSummary
        }

        public async ListMyInvoices(params: Paginate): Promise<InvoicesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: String(params.Limit),
                page:  String(params.Page),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/invoices`, undefined, {query})
            return await resp.json() as InvoicesResponse
        }

        public async ListMyOrders(params: Paginate): Promise<OrdersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: String(params.Limit),
                page:  String(params.Page),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/orders`, undefined, {query})
            return await resp.json() as OrdersResponse
        }
    }
}

export namespace pages {
    /**
     * Named response type for list endpoints (Encore requires named structs)
     */
    export interface AdminListResponse {
        items: PageResponse[]
    }

    export interface PageResponse {
        slug: string
        title: string
        content: string
        /**
         * html | markdown
         */
        format: string

        "updated_at": string
    }

    export interface UpdatePageRequest {
        title: string
        content: string
        /**
         * html | markdown
         */
        format: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AdminList = this.AdminList.bind(this)
            this.AdminUpsert = this.AdminUpsert.bind(this)
            this.GetPage = this.GetPage.bind(this)
        }

        public async AdminList(): Promise<AdminListResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/admin/pages`)
            return await resp.json() as AdminListResponse
        }

        public async AdminUpsert(slug: string, params: UpdatePageRequest): Promise<PageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PUT", `/admin/pages/${encodeURIComponent(slug)}`, JSON.stringify(params))
            return await resp.json() as PageResponse
        }

        public async GetPage(slug: string): Promise<PageResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/pages/${encodeURIComponent(slug)}`)
            return await resp.json() as PageResponse
        }
    }
}

export namespace shipments {
    /**
     * ListShipmentsQuery represents query params for listing shipments by order id.
     */
    export interface ListShipmentsQuery {
        OrderID: number
    }

    /**
     * ListShipmentsResponse represents a list of shipments.
     */
    export interface ListShipmentsResponse {
        items: Shipment[]
    }

    /**
     * Shipment represents a shipment record.
     */
    export interface Shipment {
        id: number
        "order_id": number
        "company_id": number
        "delivery_method": string
        status: string
        "tracking_ref": string
        events: JSONValue
    }

    /**
     * UpdateShipmentRequest updates shipment status and optionally tracking reference, appending an event.
     */
    export interface UpdateShipmentRequest {
        status: string
        "tracking_ref": string
        event: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.GetShipment = this.GetShipment.bind(this)
            this.ListShipmentsByOrder = this.ListShipmentsByOrder.bind(this)
            this.UpdateShipment = this.UpdateShipment.bind(this)
        }

        /**
         * GetShipment returns a shipment by id (owner or admin).
         */
        public async GetShipment(id: string): Promise<Shipment> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/shipments/${encodeURIComponent(id)}`)
            return await resp.json() as Shipment
        }

        /**
         * ListShipmentsByOrder lists shipments for a given order (owner or admin).
         */
        public async ListShipmentsByOrder(params: ListShipmentsQuery): Promise<ListShipmentsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "order_id": String(params.OrderID),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/shipments`, undefined, {query})
            return await resp.json() as ListShipmentsResponse
        }

        /**
         * UpdateShipment updates shipment fields and appends an event (Admin only).
         */
        public async UpdateShipment(id: string, params: UpdateShipmentRequest): Promise<Shipment> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/shipments/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as Shipment
        }
    }
}

export namespace users {
    /**
     * Address represents a user address
     */
    export interface Address {
        id: number
        "user_id": number
        "city_id": number
        label: string
        line1: string
        line2: string
        "is_default": boolean
        "archived_at": string
        "created_at": string
        "updated_at": string
    }

    /**
     * AddressInput represents the address creation request
     */
    export interface AddressInput {
        "city_id": number
        label: string
        line1: string
        line2: string
        "is_default": boolean
    }

    /**
     * AddressOutput represents the address creation response
     */
    export interface AddressOutput {
        address: Address
        message: string
    }

    /**
     * ListAddressesResponse represents the addresses list response
     */
    export interface ListAddressesResponse {
        addresses: Address[]
        total: number
    }

    /**
     * ReviewVerificationRequest represents the admin verification review request
     */
    export interface ReviewVerificationRequest {
        reason: string
    }

    /**
     * ReviewVerificationResponse represents the admin verification review response
     */
    export interface ReviewVerificationResponse {
        request: VerificationRequest
        message: string
    }

    /**
     * UpdateAddressRequest represents the address update request
     */
    export interface UpdateAddressRequest {
        "city_id": number
        label: string
        line1: string
        line2: string
        "is_default": boolean
        "archived_at": string
    }

    /**
     * UpdateAddressResponse represents the address update response
     */
    export interface UpdateAddressResponse {
        address: Address
        message: string
    }

    /**
     * UpdateProfileRequest represents the profile update request
     */
    export interface UpdateProfileRequest {
        name: string
        phone: string
        "city_id": number
    }

    /**
     * UpdateProfileResponse represents the profile update response
     */
    export interface UpdateProfileResponse {
        user: UserProfileResponse
        message: string
    }

    /**
     * UserProfileResponse represents user profile information
     */
    export interface UserProfileResponse {
        id: number
        name: string
        email: string
        phone: string
        "city_id": number
        role: string
        state: string
        "email_verified_at": string
        "created_at": string
        "updated_at": string
    }

    /**
     * VerificationRequest represents a verification request
     */
    export interface VerificationRequest {
        id: number
        "user_id": number
        note: string
        status: string
        "reviewed_by": number
        "reviewed_at": string
        "created_at": string
    }

    /**
     * VerificationRequestInput represents the verification request creation
     */
    export interface VerificationRequestInput {
        note: string
    }

    /**
     * VerificationRequestOutput represents the verification request creation response
     */
    export interface VerificationRequestOutput {
        request: VerificationRequest
        message: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.ApproveVerificationRequest = this.ApproveVerificationRequest.bind(this)
            this.CreateAddress = this.CreateAddress.bind(this)
            this.CreateVerificationRequest = this.CreateVerificationRequest.bind(this)
            this.GetProfile = this.GetProfile.bind(this)
            this.ListAddresses = this.ListAddresses.bind(this)
            this.RejectVerificationRequest = this.RejectVerificationRequest.bind(this)
            this.UpdateAddress = this.UpdateAddress.bind(this)
            this.UpdateProfile = this.UpdateProfile.bind(this)
        }

        /**
         * ApproveVerificationRequest approves a verification request (Admin only)
         */
        public async ApproveVerificationRequest(id: number, params: ReviewVerificationRequest): Promise<ReviewVerificationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/verify/requests/${encodeURIComponent(id)}/approve`, JSON.stringify(params))
            return await resp.json() as ReviewVerificationResponse
        }

        /**
         * CreateAddress creates a new address for the current user (requires email verification)
         */
        public async CreateAddress(params: AddressInput): Promise<AddressOutput> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/addresses`, JSON.stringify(params))
            return await resp.json() as AddressOutput
        }

        /**
         * CreateVerificationRequest creates a new verification request for the current user
         */
        public async CreateVerificationRequest(params: VerificationRequestInput): Promise<VerificationRequestOutput> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/verify/requests`, JSON.stringify(params))
            return await resp.json() as VerificationRequestOutput
        }

        /**
         * GetProfile returns the current user's profile information
         */
        public async GetProfile(): Promise<UserProfileResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/me`)
            return await resp.json() as UserProfileResponse
        }

        /**
         * ListAddresses returns all addresses for the current user (available to registered users)
         */
        public async ListAddresses(): Promise<ListAddressesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/addresses`)
            return await resp.json() as ListAddressesResponse
        }

        /**
         * RejectVerificationRequest rejects a verification request (Admin only)
         */
        public async RejectVerificationRequest(id: number, params: ReviewVerificationRequest): Promise<ReviewVerificationResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/verify/requests/${encodeURIComponent(id)}/reject`, JSON.stringify(params))
            return await resp.json() as ReviewVerificationResponse
        }

        /**
         * UpdateAddress updates an existing address for the current user (requires email verification)
         */
        public async UpdateAddress(id: number, params: UpdateAddressRequest): Promise<UpdateAddressResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/addresses/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateAddressResponse
        }

        /**
         * UpdateProfile updates the current user's profile information
         */
        public async UpdateProfile(params: UpdateProfileRequest): Promise<UpdateProfileResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/me`, JSON.stringify(params))
            return await resp.json() as UpdateProfileResponse
        }
    }
}

export namespace worker {
    /**
     * CleanupResponse represents the result of cleaning expired payment sessions
     */
    export interface CleanupResponse {
        "failed_invoices": number
        "products_released": number
    }

    export interface InitRequest {
        "invoice_id": number
        method: string
        IdemKey: string
    }

    export interface InitResponse {
        status: string
        "invoice_id": number
        "payment_id": number
        "session_url": string
    }

    /**
     * Payment DTO for retrieval
     */
    export interface PaymentDTO {
        id: number
        "invoice_id": number
        status: string
        gateway: string
        "gateway_ref": string
        "amount_authorized": number
        "amount_captured": number
        "amount_refunded": number
        "refund_partial": boolean
        currency: string
        "created_at": string
    }

    export interface RefundRequest {
        amount: number
    }

    export interface RefundResponse {
        "payment_id": number
        "invoice_id": number
        refunded: number
        "total_refunded": number
        captured: number
        "refund_partial": boolean
        "payment_status": string
        "invoice_status": string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.AdminRefundPayment = this.AdminRefundPayment.bind(this)
            this.GetPayment = this.GetPayment.bind(this)
            this.InitPayment = this.InitPayment.bind(this)
            this.MoyasarWebhook = this.MoyasarWebhook.bind(this)
        }

        public async AdminRefundPayment(id: number, params: RefundRequest): Promise<RefundResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/admin/payments/${encodeURIComponent(id)}/refund`, JSON.stringify(params))
            return await resp.json() as RefundResponse
        }

        public async GetPayment(id: number): Promise<PaymentDTO> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/payments/${encodeURIComponent(id)}`)
            return await resp.json() as PaymentDTO
        }

        public async InitPayment(params: InitRequest): Promise<InitResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "idempotency-key": params.IdemKey,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "invoice_id": params["invoice_id"],
                method:       params.method,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/payments/init`, JSON.stringify(body), {headers})
            return await resp.json() as InitResponse
        }

        public async MoyasarWebhook(method: "POST", body?: RequestInit["body"], options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/payments/webhook/moyasar`, body, options)
        }
    }
}

export namespace config {
    /**
     * SystemSettings holds all system configuration
     */
    export interface SystemSettings {
        /**
         * WebSocket settings
         */
        "ws_enabled": boolean

        "ws_max_connections": number
        "ws_heartbeat_interval": number
        /**
         * PRD additions
         */
        "ws_max_connections_per_host": number

        "ws_msgs_per_minute": number
        /**
         * Payment settings
         */
        "payments_enabled": boolean

        "payments_provider": string
        "payments_test_mode": boolean
        "payments_currency": string
        /**
         * CORS settings
         */
        "cors_allowed_origins": string[]

        "cors_allowed_methods": string[]
        "cors_allowed_headers": string[]
        "cors_max_age": number
        /**
         * Media settings
         */
        "media_max_file_size": number

        "media_allowed_types": string[]
        "media_storage_provider": string
        "media.watermark.enabled": boolean
        "media.watermark.position": string
        "media.watermark.opacity": number
        /**
         * App settings
         */
        "app_name": string

        "app_version": string
        "app_maintenance_mode": boolean
        "app_registration_enabled": boolean
        /**
         * Notification settings
         */
        "notifications_email_enabled": boolean

        "notifications_sms_enabled": boolean
        "notifications_push_enabled": boolean
        /**
         * Security settings
         */
        "security_session_timeout": number

        "security_max_login_attempts": number
        "security_lockout_duration": number
        /**
         * Auction settings
         */
        "auctions_default_duration": number

        "auctions_min_bid_increment": number
        "auctions_auto_extend_enabled": boolean
        "auctions_auto_extend_duration": number
        "auctions_anti_sniping_minutes": number
        /**
         * VAT and shipping settings
         */
        "vat_enabled": boolean

        "vat_rate": number
        "shipping_free_threshold": number
        "auctions_max_extensions": number
        "payments_session_ttl_minutes": number
        "payments_idempotency_ttl_hours": number
        "notifications_email_retention_days": number
        /**
         * Rate limits (PRD)
         */
        "bids_rate_limit_per_minute": number

        "payments_rate_limit_per_5min": number
        /**
         * Stock / Cart settings
         */
        "stock_checkout_hold_minutes": number

        "stock_supplies_hold_minutes": number
        "stock_max_active_holds_per_user": number
        /**
         * Metadata
         */
        "last_updated": string
    }
}

// JSONValue represents an arbitrary JSON value.
export type JSONValue = string | number | boolean | null | JSONValue[] | {[key: string]: JSONValue}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | string
  | Promise<string | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "loft-backend-df3i-Generated-TS-Client (Encore/v1.50.0)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: string | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = {};
            data.headers["Authorization"] = "Bearer " + authData;

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
